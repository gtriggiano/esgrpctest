syntax = "proto3";

package gRPCEventStore;

service Api {
  // Ping
  rpc Ping (EmptyDTO) returns (EmptyDTO);

  // Returns a live stream of events emitted as soon as they are stored
  rpc SubscribeToStoreStream (EmptyDTO) returns (stream StoredEvent);
  // Returns a live stream of all the events stored after a given cursor.
  // The server implementation should transparently switch to live events as long as it has finished to send the old ones.
  rpc SubscribeToStoreStreamFromCursor (StoredEventCursor) returns (stream StoredEvent);
  // Returns an ending stream of all the events stored after a certain cursor
  rpc ReadStoreStreamForward (StoredEventCursor) returns (stream StoredEvent);

  // Returns a live stream of events belonging to an aggregate stream
  rpc SubscribeToAggregateStream (AggregateStreamRequest) returns (stream StoredEvent);
  // Returns a live stream of events belonging to an aggregate stream and stored after a given cursor.
  rpc SubscribeToAggregateStreamFromCursor (AggregateIdentityAndCursor) returns (stream StoredEvent);
  // Returns an ending stream of all the events belonging to an aggregate and stored after a certain cursor
  rpc ReadAggregateStreamForwardFromCursor (AggregateIdentityAndCursor) returns (stream StoredEvent);

  // Returns a live stream of events belonging to the streams of aggregates of a given type
  rpc SubscribeToAggregateTypeStream (AggregateTypeAndCursor) returns (stream StoredEvent);
  // Returns a live stream of events belonging to the streams of aggregates of a given type and stored after a given cursor
  rpc SubscribeToAggregateTypeStreamFrom (AggregateTypeAndCursor) returns (stream StoredEvent);
  // Returns an ending stream of all the events belonging to the streams of aggregates of a given type and stored after a given cursor
  rpc ReadAggregateTypeStreamForward (AggregateTypeAndCursor) returns (stream StoredEvent);

  // Returns a live stream of events of a certain type
  rpc SubscribeToEventTypeStream (EventTypeAndCursor) returns (stream StoredEvent);
  // Returns a live stream of events of a certain type, stored after a given cursor
  rpc SubscribeToEventTypeStreamFrom (EventTypeAndCursor) returns (stream StoredEvent);
  // Returns an ending stream of all the events of a certain type stored after a given cursor
  rpc ReadEventTypeStreamForward (EventTypeAndCursor) returns (stream StoredEvent);

  // Attempts to write a list of events into an aggregate stream
  rpc WriteToAggregateStream (WriteToAggregateStreamRequest) returns (EmptyDTO);
  // Attempts to write N list of events into N aggregate streams
  rpc WriteToMultipleAggregateStream (WriteToMultipleAggregateStreamRequest) returns (EmptyDTO);
}

message EmptyDTO {}

message Event {
  required string type = 1;
  string data = 2;
  string metadata = 3;
}

message StoredEvent {
  required int64 id = 1;
  required string type = 2;
  required AggregateIdentity aggregateIdentity = 3;
  required string storedOn = 4;
  required int32 sequenceNumber = 5;
  required string data = 6;
  required string metadata = 7;
  string transactionId = 8;
}

message StoredEventCursor {
  required int64 eventId = 1;
}

message Aggregate {
  required AggregateIdentity identity = 1;
  required int32 version = 2;
  repeated StoredEvent events = 3;
}

message AggregateIdentity {
  required string uuid = 1;
  required string type = 2;
}

message AggregateStreamRequest {
  required AggregateIdentity aggregateIdentity = 1;
  StoredEventCursor fromCursor = 2;
  int32 limit = 3;
}

message AggregateTypeStreamRequest {
  required string aggregateType = 1;
  StoredEventCursor fromCursor = 2;
  int32 limit = 3;
}

message EventTypeStreamRequest {
  required string eventType = 1;
  StoredEventCursor fromCursor = 2;
  int32 limit = 3;
}

message WriteToAggregateStreamRequest {
  required AggregateIdentity aggregateIdentity = 1;
  required sint32 expectedAggregateVersion = 2;
  repeated Event events = 3;
}

message WriteToMultipleAggregateStreamRequest {
  repeated WriteToAggregateStreamRequest aggregatesEvents = 1;
}
